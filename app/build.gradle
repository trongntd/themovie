//apply plugin: 'com.android.application'
//apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-kapt'
//apply plugin: 'kotlin-android-extensions'
//apply plugin: 'jacoco'
//apply plugin: 'com.github.kt3k.coveralls'

plugins {
  id 'com.android.application'
  id 'kotlin-android'
  id 'kotlin-kapt'
  id 'kotlin-android-extensions'
  id 'jacoco'
  id 'com.github.kt3k.coveralls'
}

tasks.coveralls {
  onlyIf { System.getenv("COVERALLS_REPO_TOKEN") }
}


jacoco {
  toolVersion = '0.8.0'
}

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
}

androidExtensions {
  experimental = true
}

subprojects {
  project.plugins.whenPluginAdded { plugin ->
    if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
      project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
    }
  }
}

android {
  compileSdkVersion 27
  buildToolsVersion "27.0.3"
  defaultConfig {
    applicationId "com.ea.themovie"
    minSdkVersion 19
    targetSdkVersion 27
    versionCode 1
    versionName "1.0"
    testInstrumentationRunner "com.ea.themovie.MockTestRunner"
  }
  buildTypes {
    debug {
      testCoverageEnabled true
    }
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
  lintOptions {
    abortOnError false
  }
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
  implementation 'com.android.support:appcompat-v7:27.1.1'
  implementation 'com.android.support:design:27.1.1'
  implementation 'com.android.support:recyclerview-v7:27.1.1'
  implementation 'com.android.support:cardview-v7:27.1.1'

  // retrofit
  implementation 'com.squareup.retrofit2:retrofit:2.4.0'
  implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
  implementation 'com.google.code.gson:gson:2.8.1'


  //glide
  implementation 'com.github.bumptech.glide:glide:4.7.1'
  kapt 'com.github.bumptech.glide:compiler:4.7.1'

  // dagger
  kapt 'com.google.dagger:dagger-compiler:2.15'
  implementation 'com.google.dagger:dagger-android:2.15'
  implementation 'com.google.dagger:dagger-android-support:2.15'
  // if you use the support libraries
  kapt 'com.google.dagger:dagger-android-processor:2.15'

  // youtube
  implementation files('libs/YouTubeAndroidPlayerApi.jar')

  implementation 'org.apache.httpcomponents:httpmime:4.3'

  androidTestImplementation 'com.android.support.test:runner:1.0.2'
  androidTestImplementation 'com.android.support.test:rules:1.0.2'
  androidTestImplementation('com.android.support.test.espresso:espresso-contrib:3.0.2') {
    exclude group: 'com.android.support', module: 'appcompat'
    exclude group: 'com.android.support', module: 'support-v4'
    exclude module: 'recyclerview-v7'
  }
  androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
  testImplementation 'junit:junit:4.12'
  testImplementation 'org.mockito:mockito-core:2.18.3'
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['connectedCheck', 'test']) {
  group = 'Reporting'
  description = 'Generate Jacoco coverage reports after running tests.'

  reports {
    xml.enabled = true
    html.enabled = true
  }

  // use hidden configuration, for details look into JacocoPlugin.groovy
  // jacocoClasspath = project.configurations['androidJacocoAnt']

  // exclude auto-generated classes and tests
  def fileFilter = ['**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*']
  def debugTree = fileTree(dir: "${project.buildDir}/intermediates/classes/debug",
      excludes: fileFilter)
  def debugTreeKotlin = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug",
      excludes: fileFilter)
  def mainSrc = "${project.projectDir}/src/main/java"

  sourceDirectories = files([mainSrc])
  classDirectories = files([debugTree, debugTreeKotlin])
  executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])
}
